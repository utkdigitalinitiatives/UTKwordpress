//
// Header 
// --------------------------------------------------



// Site hiearachy. Parent Unit Protocal.
#orange-bar {
  display: none;
   @media (min-width: $screen-md) {
      display: block;
      float: left;
      min-height: 6px;
      background: $utorange;
      width: 100%;
     // position: absolute;
      z-index: $zindex-orangebar;
      clear: both;
      color: $white;
      a {
        color: $white;
      }
      .container {
        width: 90%;
        margin: 0 auto;
        max-width: 1400px;
      }
  }
}




// Main Masthead
//
// Set the container width, and override it for fixed navbars in media queries.

#masthead {
  @include clearfix();
  h3.killer-logo  {
    float: left;
    margin-top: ($line-height-computed / 2);
    position: absolute;
    width: 60px;
    @include transition(all 0.25s ease-in-out);
    @media (min-width: $screen-md) {
      width: 100%;
      margin: 0;
      position: relative;
    }
    a {
      padding: 0;
      height:0px !important;
      text-indent:-9999px;
      display:block;
      width: 100%;
      padding: 0 0 $navbar-height 0;
      overflow: hidden;
      background-position: center 5px;
      background-size: 125px 161px;
      @media (min-width: $screen-md) {
        width: 100%;
        margin: 0;
        background-position: center 25px;
        background-size: 200px 250px;
        padding-bottom: 175px;
        position: relative;
        @include transition(all 0.25s ease-in-out);
      }
    }
  }
  button.findpage {
    position: absolute;
    width: 75px;
    min-height: 75px;
    margin: 0;
    float: right;
    right: 0;
     @media (min-width: $screen-md) {
       display: none;
    }
  }
}
#sitetitle {
  // float: left;
  // position: absolute;
  width: 100%;
	margin-right: -($gutter-width);
	margin-left: -($gutter-width);
	width: (100% + ($gutter-width * 2));
  background: $white;
  border-bottom: 1px solid lighten($utrock, 20%);
  @media (min-width: $screen-md) {
      position: relative;
      top: auto;
      left: auto;
      width: 100%;
      margin: 0;
      padding-bottom: 0.75em;
    }
  h2.department {
    font-size: $font-size-large;
    font-family: $font-family-sans-serif;
    line-height: 1;
    display: inline-block;
    vertical-align: middle;
 //   margin-top: $line-height-computed;
    margin-right: (($column-width * 3) + ($gutter-width * 2));
    margin-bottom:   ($line-height-computed * 1.3);
    margin-left:  60px;
    @include transition(all 0.25s ease-in-out);
    a {
      color: $utsmokey;
      margin: 0 auto;
      width: 100%;
      float: none;
      display: block;
    }
    small {
      display: none;
      @media (min-width: $screen-md) {
        display: inline;
        a {
          padding: 0.3em 0 0;
          color: $gray-light;
          font-size: 0.8em;
          font-weight: 300;
//          text-transform: capitalize;
        }
      }
    }
   @media (min-width: $screen-md) {
      margin-top: $line-height-computed;
      margin-bottom: $line-height-computed/1.3;
      font-size: ($font-size-large * 2.2);
      margin-left: 6%;
      padding: 0.3em 0;
    }
  }
}

// Affixy thingy. Because IDs override styling on classes and because the killer logo 
// and the site title are in different DIVS, it requiers some specific styling beyond the default Bootstrap affix
// Also, we do not want the affix to everywhere, only in 'desktop mode'


#sitetitle, #masthead, .sidebar-offcanvas  {
  z-index: $zindex-affix;
  @media (min-width: $screen-md) {
    &.stuck {
      // this overrides the affix class, so that it does not affix on small screens.
      z-index: $zindex-affixed;
    }
  }
}
.sidebar-offcanvas  {
  @media (min-width: $screen-md) {
    overflow: visible;
    &.stuck {
      position: fixed;
      top:90px;
      width: 27%; 
      &.affix-bottom {
        position: absolute;
        bottom: 0;
        top: initial;
        z-index: 1;
        width: 100%;
      }
    }
  }
}

#masthead {
  position: static;
  @media (min-width: $screen-md) {
    &.stuck {
      // this is where we style the stuff we want to affix to the top. Only change what needs to be changed.
      position: fixed;
      top: 0;
      width: 27%;
      max-width: 420px;
      h3.killer-logo a {
          @include transition(all 0.25s ease-in-out);
          padding: 0 0 73px 0;
          background-position: center -195px;
          border-bottom: 1px solid lighten($utrock, 20%);
          background-color: #fff;
      }
    }
  }
}




#sitetitle {
  @media (min-width: $screen-md) {
    max-width: 980px;
    &.stuck {
      position: fixed;
      top: 0;
      background-color: transparentize($white,0.05);
      width: 63%;
      padding-bottom: 0;
      h2.department {
        font-size: $font-size-large;
        @include transition(all 0.25s ease-in-out);
        small {
          display: none;
        }
      }

    }
  }
}
#masthead-webapp {
  background-color: transparentize($white,0.05);
  top: 0;
  width: 100%;
  float: left;
  border-bottom: 1px solid lighten($utrock, 20%);
  margin-bottom: 2px;
  h3.killer-logo {
    float: left;
    margin-top: 0;
    width: 70px;
    margin-left: $gutter-width;
      @media (min-width: $screen-md) {
        width: 24%;
        margin-left: 6%;
      }
     a {
      width: 58px;
      margin: 0;
      height: 0 !important;
      display: inline-block;
      background-size: 200px 250px;
      position: relative;
      text-indent:-9999px;
      padding: 0 0 58px 0;
      background-position: left -195px;
      @include transition(all 0.25s ease-in-out);
      @media (min-width: $screen-md) {
        width: 100%;
      }
    }
  }
}
#sitetitle-webapp {
  width: 70%;
  float: left;
  h2.department {
    font-size: $font-size-large;
    @include transition(all 0.25s ease-in-out);
    a {
      color: $utsmokey;
      margin: 0 auto;
      width: 100%;
      float: none;
      display: block;
    }
  }
}


 // CE: Lets setup a container for the info above the footer, so we can create a two column layout that is a bit easier to control
.main-content {
  position: relative;
  &:before,
  &:after {
      content: " "; /* 1 */
      display: table; /* 2 */
  }
  &:after {
      clear: both;
  }
}